------------------------------------------------------------------LifyCycle of Laravel---------------------------------------------------------

1-index.php inside public(file directly run nahi hoti, balki yeh web server (Apache, Nginx) ke through request handle karti hai.)
2-vendor/autoload.php
	Yeh Composer ke zariye generate hoti hai aur application ko automatic tor par PHP classes, Services, (controllers, models, aur 
	doosray components(Services for email,gateway), Helpers, event listeners jobs quesus etc)
	ko dhoondhne aur load karne mein madad deti hai. Yeh file composer.json mein diye gaye third-party libraries aur packages ko bhi load karti hai,
	taake wo application ke har hisse mein available ho sakein bina unko manually include kiye.
3-bootstrap/app.php
	Yeh file Laravel application ko start karti hai.
	Isme zaroori services jaise routing, database connection, aur middleware set up hotay hain.
		Middleware and Routing
			request ko process karne ke liye middleware ko set up karti hai. 
			Jab user koi request bhejta hai, woh pehle middleware ke through jata hai, 
			jo us request ko check karta hai (jaise authentication, size check, maintenance mode). 
			Agar sab kuch theek hota hai, toh request ko process kar diya jata hai aur response diya jata hai.
	Yeh application ke environment ko configure karti hai, jaise .env file se settings ko load karna.
	user ki request ko respond krne k lie ready krna

4-Request ko route kiya jata hai, jo controller ya closure se match hota hai.
5-Controller business logic ko process karta hai aur zarurat par models se database se data laata hai.
6-Controller ke baad view ya JSON response diya jata hai.
7-HTTP Kernel final response ko user ko bhejta hai aur middleware optional modifications karte hain.

8-Middleware
	Middleware ek filter hota hai jo request aur response ke beech mein kaam karta hai. 
	Jab user kisi route ko access karta hai, middleware us request ko pehle check karta hai. Yeh kuch conditions,
	jaise authentication ya authorization, check karta hai. Agar sab kuch theek ho, toh request controller tak pohnchti hai.

---------------------------------------------------------------------Service Provider/Facades and Service Container ---------------------------------

1-Service Provider
	Service Provider ka kaam services ko register aur configure karna hota hai.
	Yeh batata hai ke koi service Laravel ke Service Container mein kaise available hogi.

2-Service Container
	Service Container register ki hui services ko Service Provider ke zariye manage karta hai.
	Jab aap apni service ko kahin application mein use karte hain (e.g., app(YourServiceClass::class)), to Service Container us service ko inject karta hai.
	ta key aap us service ko use kar sken.

	Custome Example
		Aapne ek Email Service banai jo mail send karne ka kaam karti hai.
		Phir aapne ek EmailServiceProvider banaya aur usme apni Email Service ko register kiya.
		Aapne EmailServiceProvider ko bootstap/providers.php file mein add kiya taake Laravel ko pata chale ke yeh service available hai.
		Ab Service Container automatically aapki Email Service ko inject karega jab bhi aap usse kahin bhi use karenge.
		Aap Service Provider ke zariye apni Email Service ko resolve karke mail send kar sakte hain.


3-Service Provider Vs Facades:
		Kisi bhi service ko use karne ke liye, usko pehle Service Provider mein register karna zaroori hota hai. 
		Service provider ki madad se, Laravel apne Service Container mein service ko register karta hai, 
		jisse woh service app ke kisi bhi part mein available ho jati hai.

	Facades:
		Facade ek static shortcut hota hai jo aapko registered service ko easily use karne ka tareeqa deta hai.
		taake aap us service ko directly static tareeqe se access kar sakein (e.g., DB::table(), Mail::send()). 
		Facades sirf ek shortcut hain jo underlying service ko access karte hain, jo pehle service provider ke zariye register hoti hai.

------------------------------------------------------------Composer and json/lock----------------------------------------------------------------
Composer 
	Composer ek PHP dependency manager hai jo Laravel mein packages aur libraries ko manage karta hai.
	Yeh automatically dependencies ko install, update, aur load karta hai, jisse aapko manually unko 
	manage karne ki zarurat nahi padti. Composer version control, third-party libraries ki installation, 
	aur auto-loading ko asaan banata hai, jo development process ko fast aur efficient bana deta hai.

1-composer.json
	isme aap apne project ke liye dependencies (libraries ya packages jo aapke project ko chalane ke liye chahiye hoti hain) define karte hain.
	Autoloading: Yeh define karta hai ke aapke project ki classes kaise load ki jayengi.
	Scripts: Custom commands bhi yahan define ki ja sakti hain, jo install hone ke baad automatically run hoti hain (jaise application key generate karna).

2-composer.lock
	ye file aapke dependencies ke exact versions ko lock kar deti hai. 
	Yeh file ensure karti hai ke har koi jo aapka project clone karega, usse same versions milenge jo aapne use kiye hain.

----------------------------------------------------NPM and packg/lock-------------------------------------------------------

1-NPM 
	Aik tool hai jo Node.js ke saath aata hai. Yeh JavaScript aur Node.js libraries ko install, manage,
	aur share karne mein madad karta hai. Laravel aur doosre frameworks mein front-end libraries ko manage karne ke liye iska use hota hai.

2-package.json: 
	Yeh file aapke project ki dependencies aur settings ko define karti hai.

3-package-lock.json: 
	Yeh file installed dependencies ke exact versions ko record karti hai, jisse sabhi developers ke liye same setup ho.

4-Node Modules:
	Yeh folder aapke project ke andar installed libraries ko store karta hai.

	node_modules Laravel mein directly load nahi hoti jab application start hoti hai.
	npm install se aap dependencies install karte hain, jo Laravel Mix ke zariye compile aur bundle hoti hain.
	Final assets public folder mein store hoti hain aur web pages mein load hoti hain.

---------------------------------------------------------Eloquent ORM & Relations----------------------------------------------
1-Eloquent ORM
	Laravel ka ek tool hai jo database ke records ko OOP(php objects) ke zariye se handle karta hai.
	Isse aap easily database se data retrieve, update, ya delete kar sakte hain bina SQL likhe.
	Is sa Model Relationship(one to one, one to may etc) bna skty he jis sa data organize  easy accessible hota ha 

hasOne: One-to-one relation (User has one Profile).
hasMany: One-to-many relation (User has many Posts).
belongsTo: Inverse of hasOne or hasMany (Post belongs to a User).
belongsToMany: Many-to-many relation (User belongs to many Roles).
One-to-One Through Relationship
	A Country has one CapitalCity, but the capital is stored in the Cities table, and we must reach it via the States table.
One-to-Many Through Relationship
	A Country has many Cities, but we access them through States.

2-Polymorph and one to any
	One-to-Many	Two specific models	Posts and Comments (Only posts have comments)
	Polymorphic	One model with multiple related models	Posts & Videos share comments table
		
----------------------------------------------------------Artisan---------------------------------------
1-Artisan Laravel ka command-line interface (CLI) hai jo aapko apne application ke sath commands ke through interact karne mein madad deta hai.
Ye common tasks jaise migrations, caching, aur zyada ke liye built-in commands provide karta hai.

----------------------------------------------------------Blade Temp engine---------------------------------------

1-Blade Templating Engine Laravel ka tool hai jo HTML aur dynamic content ko manage karne ke liye use hota hai. 
	Isme simple syntax ke zariye loops, conditions, aur dynamic data inject kiya ja sakta hai. Blade layouts aur components se code reuse
	karna easy ho jata hai, jisse development fast aur maintainable hoti hai.

--------------------------------------------------------Eager/Lazy expilict loading-------------------------------------------------
	Explicit loading is used when you already have a model instance and want to load its relationships later,
		can be useful when you conditionally need($user->load('posts'); )
	Lazy loading executes separate queries for each relationship, while Eager loading fetches all relationships in one query.)
	Post::with('comments')->get(); Eager loading

---------------------------------------------------------Migration-----------------------------------------------------------

	Migrations ka istemal karke aap apne database ki structure ko asaani se define aur modify kar sakte hain. 
	Isse aap apne database ke changes ko easily share kar sakte hain aur multiple developers ke beech consistency bana sakte hain.
		up(): Is method mein hum changes define karte hain jo database mein apply honge, jaise posts table ka creation.
		for example, table ko delete karna ho), to aap down() method use karte hain, down() method ko migration rollback karne ke liye use kiya jata hai. 

----------------------------------------------	Laravel Events, Listeners, Queues, and Broadcasting --------------------------

1-Laravel Events and Listeners ka use real-time notifications, background processing, or system actions ko handle karne ke liye hota hai.
2-Laravel asynchronous processing ka istemal karta hai Queues aur Events & Listeners ke through, jisse 
	slow tasks (jaise email sending Job Running in the Queue,  notifications, data processing) ko background mein execute kiya jata hai.

Events		Trigger actions on specific events		When a user registers, fire UserRegistered event
Listeners	Respond to events by executing logic		SendWelcomeEmail listener sends an email
Queues		Run tasks in background to improve performance	Email sending runs asynchronously in queue
Broadcasting	Send real-time updates using WebSockets		New chat messages are instantly displayed to users
Job 		A Job is a class that defines a specific task to be executed in the queue. by implements ShouldQueue for queue for background otherwise run as weel.

	Queue Driver in Laravel(QUEUE_CONNECTION=database  # Change to 'redis', 'sync', etc.)
		A Queue Driver in Laravel determines where the queued jobs will be stored and processed.
		sync	Runs jobs immediately (no queue)
		database	Stores jobs in the database (good for small apps)
		redis	Fast in-memory queue (best for high-performance apps)
		sqs	Amazon SQS (scalable, cloud-based queue)

Job Chaining in Laravel allows multiple queued jobs to execute in a specific sequence. 
	If one job fails, the remaining jobs will not execute
		Bus::chain([
		    	new SendWelcomeEmail($user),
	    		new GenerateUserProfile($user),
    			new NotifyAdmin($user)
		])->catch(function ($e) {
    			Log::error('Job failed: ' . $e->getMessage());
		})->dispatch();


	Job dispatch()				Not Executes Immediately	Background tasks
	Job dispatchSync()/dispatchNow()	Executes Immediately		Immediate execution

Job Batching in Laravel allows you to dispatch multiple jobs simultaneously,
	Suppose we need to send emails to 10,000 users. Instead of sending them one by one (slow process)

------------------------------------------------ Observer and Event Listerenr--------------------------------------

Observers are used to listen to Eloquent model events (e.g., created, updated, deleted).
They allow us to execute logic before or after a model operation.
They are specific to models and help keep database-related logic separate from controllers.

Scope	Works only with models	Works application-wide
Use Case	Used for model lifecycle events (created, updated, deleted)	Used for any custom event (user registration, email sending, etc.)
Multiple Listeners?	No, single observer per model	Yes, multiple listeners can listen to the same event
Queued Jobs?	No built-in support for queues	Yes, listeners can be queued (ShouldQueue)
Example	Sending an email when a user is created using UserObserver	Broadcasting a new user registration event to send emails & logs separately

	Scope			Works only with models						Works application-wide
	Use Case		Used for model lifecycle events (created, updated, deleted)	Used for any custom event (user registration, email sending, etc.)
	Multiple Listeners?	No, single observer per model					Yes, multiple listeners can listen to the same event
	Queued Jobs?		No built-in support for queues					Yes, listeners can be queued (ShouldQueue)
	Example			Sending an email when a user is created using UserObserver	Broadcasting a new user registration event 
												to send emails & logs separately


--------------------------------------------------------------has(), whereHas(), and with()-----------------

	check if User Has Any Posts $users = User::has('posts')->get();
	Add Condition Inside Relationship
	Load Related Posts with Users

---------------------------------------------------------Singleton Pattern in Laravel-----------------------------

	The Singleton Pattern ensures that only one instance of a class is created and used throughout the application. 
	Laravel uses this pattern to optimize performance by preventing multiple instances of the same class from being created.

	When you want to store state (like logs, cache, configuration).
	For services that don’t need multiple instances (e.g., logging, caching, config loaders).

		$this->app->singleton(LoggerService::class, function ($app) {
        		return new LoggerService();
    		});
	Now, every time LoggerService is used, it retains previous logs.

----------------------------------------------------------Repositiory & Interfaces ---------------------------------------
Repository:
	 Ek design pattern hai jo database queries ko directly model ya controller me likhne ke bajaye ek separate class
	(repository) me manage karta hai. Ye code ko clean aur maintainable banata hai.

Interface:
	Ek contract hota hai jo define karta hai ke konsi methods kis class me honi chahiye, lekin wo method ka implementation nahi deta.

Dependency Injection:
	ka matlab hai ek class me doosri class ka object inject karna constructor ke zariye,  taky wo direct us class ke methods use kar sake.

Dependency Injection: With and Without Interface
	Without Interface (Direct Class Injection)
		UserRepository class banayi.
		UserController me UserRepository ka object inject kiya (constructor injection)
		(UserController directly UserRepository pe depend kar raha hai.
		Agar hume UserRepository ka koi aur implementation dena ho (ApiUserRepository ya CsvUserRepository), to UserController ka code change karna padega.)
	With Interface (Best Practice)
		UserRepositoryInterface banaya.
		UserRepository class ne UserRepositoryInterface ko implement kiya.
		UserController ne UserRepositoryInterface ka object inject kiya (instead of UserRepository).
		Laravel Service Container me bind kiya (AppServiceProvider me).
			lekin binding faydemand hoti hai, khas tor par jab:

		Multiple Implementations ho sakti hain (e.g., UserRepository aur ApiUserRepository).
		Loose Coupling chahiye ho, taake agar future me repository change ho to controller ko update na karna pare.
		Testing me mock repositories ya fake implementations ka istemal karna ho.


------------------------------------------------------Policy and Gate(Authorization)-------------------------------------

Gate:
	Gate ek simple function hota hai jo check karta hai ke koi user kisi specific action ko perform kar sakta hai ya nahi. 
	Ye mostly choti authorization checks ke liye use hota hai.
Policy:
	Policy ek class hoti hai jo kisi specific model ke liye multiple authorization rules define karti hai. 
	Ye complex authorization logic handle karne ke liye use hoti hai.

🔹 Gate choti aur simple permissions ke liye hota hai.(Authserviceprovider)
🔹 Policy kisi model ke multiple permissions ko handle karti hai.


----------------------------------------------------Model Attributes Main features-------------------------------------
	
Laravel me attributes wo columns hote hain jo database table me mojood hotay hain aur model ke through access kiye jate hain.

Mutator:
	wo function hota ha jo attributes ko database me save krne sa pehle modify krta ha 
Accessor:
	wo function hota ha jo attributes ko retrieve hone k bad modify krta ha
Casts: 
	database me save hone aur retrieve hone waly attributes ko automatically ek specific data type me convert karta hai.

Hidden & Visible Attributes:
	Agar aap kuch attributes ko hide ya show karna chahein jab model ka data JSON ya array me convert ho.
		protected $visible = ['id', 'name', 'email'];  protected $hidden = ['password', 'remember_token'];  

Appended Attributes:
	Agar aap model me koi naya attribute create karna chahein jo actual database me mojood na ho, lekin dynamically calculate ho.
		protected $appends = ['full_name'];
	
Fillable & Guarded Attributes:
	Agar aap mass assignment (bulk data insert/update) ka control chahte hain to fillable ya guarded ka use karte hain.
		protected $guarded = ['role'];  			(Sirf role field mass assignment se protected rahegi, baki sab allow honge.
		protected $fillable = ['name', 'email', 'password'];  	(Sirf ye fields User::create($data) me fill ho sakti hain.

Default Attribute Values:
	Agar aap kisi attribute ka default value set karna chahte hain jab model create ho raha ho.
		protected $attributes = [  'status' => 'active',  ];  

Query Scopes (Global & Local):
	Agar aap frequently used queries ko model ke andar define karna chahte hain.
		Local Scope (Agar aap kisi query ko baar baar likhne se bachna chahte hain to Local Scope use karte hain.)
		Global Scope (Hamesha automatic apply hone wali queries ke liye)
